services:
  server-rym:
    image: node
    build:
      dockerfile: backend.Dockerfile
      context: ./
    container_name: back-rym
    volumes:
      - ./Server/src:/usr/code/src
      - ./Server/package.json:/usr/code/package.json
      - ./Server/tsconfig.json:/usr/code/tsconfig.json
      - ./Server/.eslintrc.js:/usr/code/.eslintrc.js
      - ./Server/nodemon.json:/usr/code/nodemon.json
    ports:
      - 3002:3002
    environment:
      DB_HOST: db-back
      DB_PORT: 5432
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      PORT: ${PORT}
    networks:
      - put_net
    command: npm start
  client-rym:
    image: node
    build:
      dockerfile: client.Dockerfile
      context: ./
    container_name: client-rym
    volumes:
      # - ./Client/src:/usr/code/src
      # - ./Client/public:/usr/code/public
      - ./Client/:/usr/code/
    ports:
      - 5173:5173
    environment:
      VITE_BACKEND: http://localhost:3002
    networks:
      - put_net
    command: npm run host
  db-back:
    image: postgres
    container_name: db-rickymorty
    restart: always
    volumes:
      - /db/sql/schema.sql:/docker-entrypoint-initdb.d/create_schema.sql
      - /db/sql/data.sql:/docker-entrypoint-initdb.d/data.sql
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - put_net
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
networks:
  put_net:
    driver: bridge
    ipam:
      driver: default
      config:
        -
          subnet: 192.168.5.0/24